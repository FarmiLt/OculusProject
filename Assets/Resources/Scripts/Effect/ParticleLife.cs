/*********************************************************************************************************
 * 
 * ■制作者：原昌志
 * ■制作日：2015/11/17
 * 
 * ■内容
 * ・パーティクルシステムの寿命（Duration）がなくなるとパーティクルシステムが自動的に消える。
 * ・"CreateKeep()"と"CreateStop()"の２つの関数を使って存在を外部から設定を行うことが出来る。
 * 
 * ■関数
 * ・public void CreateLoop()
 * パーティクルシステムのループを有効にする関数。
 * 呼び出したあとで"CreateStop()"を呼び出さないと永遠にパーティクルシステムが実行される。
 * 
 * ・public void CreateNotLoop()
 * パーティクルシステムのループを無効にする関数。
 * "CreateLoop()"と違って寿命に合わせてパーティクルシステムを終了させる。
 * 
 * ・public void CreateStop()
 * パーティクルシステムを停止する関数。
 * 呼び出すと寿命に関係なくパーティクルシステムを終了させることが出来る。
 * 
 * ■使い方
 * // 生成・取得
 * GameObject particleSystem = Instantiate('プレハブ');
 * ParticleObject particleObject = particleSystem.GetComponent<ParticleObject>();
 * 
 * -------------------------------------------------------------------------------------------
 * 
 * // パーティクルシステムのループを有効にする。
 * // 有効にした場合"CreateStop()"を呼び出さないと永遠に続く。
 * particleObject.CreateLoop();
 * 
 * * -------------------------------------------------------------------------------------------
 * 
 * // パーティクルシステムのループを無効にする。
 * // 寿命でパーティクルシステムを終了出来る。
 * particleObject.CreateLoop();
 * 
 * -------------------------------------------------------------------------------------------
 * 
 * // パーティクルシステムの終了。
 * // 寿命が尽きていなくても終了出来る。
 * particleObject.CreateStop();
 * 
 * -------------------------------------------------------------------------------------------
 * 
 *********************************************************************************************************/
using UnityEngine;
using System.Collections;

///--------------------------------------------------------------
/// <summary>
/// パーティクルシステムの寿命のクラス
/// </summary>
///--------------------------------------------------------------
public class ParticleLife : MonoBehaviour 
{
    /*** メンバ変数 ***/
    private ParticleSystem m_particleSystem;
    private float m_life;

    /*** 定数 ***/
    private const float KILL_TIME = 0.0f;

    ///--------------------------------------------------------------
    /// <summary>
    /// 開始処理
    /// </summary>
    ///--------------------------------------------------------------
	void Awake () 
    {
        // 自身のパーティクルシステムを取得
        m_particleSystem = this.GetComponent<ParticleSystem>();

        // パーティクルシステムに設定した寿命を取得
        m_life = m_particleSystem.duration;

        // 寿命を削る処理を開始する
        StartCoroutine( CutLife() );
	}

    ///--------------------------------------------------------------
    /// <summary>
    /// 更新処理
    /// </summary>
    ///--------------------------------------------------------------
	void Update () 
    {
        // すべてのパーティクルが終了したか判断
        if (m_particleSystem.isPlaying == false)
        {
            // パーティクルを削除
            Destroy(gameObject);
        }
	}

    ///--------------------------------------------------------------
    /// <summary>
    /// 寿命を削る
    /// </summary>
    /// <returns></returns>
    ///--------------------------------------------------------------
    private IEnumerator CutLife()
    {
        // 寿命がなくなるまで削る
        while( m_life > KILL_TIME )
        {
            // 寿命を減らす
            m_life -= Time.deltaTime;
            yield return null;
        }

        // 寿命が尽きてパーティクルがループしない状態だったらこれ以上パーティクルの生成を行わない
        if( m_particleSystem.loop == false )
        {
            // パーティクルを生成しない
            this.CreateStop();
        }
        
        yield return null;
    }

    ///--------------------------------------------------------------
    /// <summary>
    /// パーティクルのループを有効にする
    /// </summary>
    ///--------------------------------------------------------------
    public void CreateLoop()
    {
        m_particleSystem.loop = true;
    }

    ///--------------------------------------------------------------
    /// <summary>
    /// パーティクルのループを無効にする
    /// </summary>
    ///--------------------------------------------------------------
    public void CreateNotLoop()
    {
        m_particleSystem.loop = false;
    }

    ///--------------------------------------------------------------
    /// <summary>
    /// パーティクルを作るのをやめる
    /// </summary>
    ///--------------------------------------------------------------
    public void CreateStop()
    {
        m_particleSystem.Stop();
    }
}
